<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ranganath S - Python</title><link href="https://6rivers.github.io/" rel="alternate"></link><link href="https://6rivers.github.io/feeds/python.atom.xml" rel="self"></link><id>https://6rivers.github.io/</id><updated>2021-10-13T01:20:00+05:30</updated><subtitle>Jottings on tech and life</subtitle><entry><title>What is the use of Virtual Environments in Python projects?</title><link href="https://6rivers.github.io/what-is-the-use-of-virtual-environments-in-python-projects.html" rel="alternate"></link><published>2021-10-13T01:20:00+05:30</published><updated>2021-10-13T01:20:00+05:30</updated><author><name>Ranganath S</name></author><id>tag:6rivers.github.io,2021-10-13:/what-is-the-use-of-virtual-environments-in-python-projects.html</id><summary type="html">&lt;p&gt;Virtual Environment is used to seperate out the versions of packages.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Use of Virtual Environments in Python Projects:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Virtual Environment is used to seperate out the versions of packages for eg., Django or Flask. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In general, if we install Packages directly without Virtual Environment then they will be installed on global levels and if you have multiple Django projects where some old projects need older versions of Django and when you need a new project with newer version of Django package and if you install it without virtual env then your older projects would be affected since the older version of Django package will be replaced with newer version. Hence it is best practice to use Virtual Env for each project and have whatever packages needed for that particular project. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;venv is recommended for creating Virtual Environments from Python 3.5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Create a folder for the new project then cd to the folder and execute below to create new virtual env&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python -m venv env_name&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Now, 'env_name' will be created inside the project folder&lt;/li&gt;
&lt;li&gt;&lt;code&gt;env_name\scripts\activate.bat&lt;/code&gt;  to activate the virtual env&lt;/li&gt;
&lt;li&gt;to verify: Eg : &lt;code&gt;(venv) C:\Users\ranganath\Desktop\Coding\Blogsite&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Do not store any project scripts inside 'env_name' folder&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip list&lt;/code&gt; -- to get list of packages installed in the current venv&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip freeze&lt;/code&gt; -- to get list of packages in a format usable to copy for requirements.txt&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"></category></entry></feed>